{"version":3,"file":"static/js/586.bf1351a5.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","webpack://social-network/./src/components/Profile/MyPosts/MyPosts.module.scss?39b9","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.scss?e49f","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileStatus.module.scss?d53a","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://social-network/./src/components/Profile/Profile.module.scss?4008","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__V5Peu\",\"likeWrapper\":\"Post_likeWrapper__MhFTE\",\"like\":\"Post_like__KQukj\"};","import React, { FC } from 'react';\r\nimport avatar from '../../../../assets/ava.jpg';\r\nimport { IPostProps } from '../../../../interfaces';\r\nimport s from './Post.module.scss';\r\n\r\nconst Post: FC<IPostProps> = (props) => {\r\n  return (\r\n    <div className={s.post}>\r\n      <img src={avatar} alt=\"avatar\" />\r\n      <div className={s.text}>{props.message}</div>\r\n      <div className={s.likeWrapper}>\r\n        <div className={s.likeCount}>{props.likeCount}</div>\r\n        <button className={s.like}></button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"myPosts\":\"MyPosts_myPosts__8AJho\",\"posts\":\"MyPosts_posts__MELf7\",\"avatarIcon\":\"MyPosts_avatarIcon__i-9AC\",\"createPost\":\"MyPosts_createPost__urmHf\",\"newPost\":\"MyPosts_newPost__McIaI\",\"btn\":\"MyPosts_btn__95VXH\",\"errors\":\"MyPosts_errors__0uhnV\",\"form\":\"MyPosts_form__3RYpB\"};","import React, { FC } from 'react';\r\nimport { Field, Form, Formik, FormikValues } from 'formik';\r\nimport avatar from '../../../assets/ava.jpg';\r\nimport { IMyPostsprops } from '../../../interfaces';\r\nimport Post from './Post/Post';\r\nimport s from './MyPosts.module.scss';\r\n\r\nconst MyPosts: FC<IMyPostsprops> = (props) => {\r\n  const postElements = props.posts.map((post) => (\r\n    <Post message={post.post} key={post.id} likeCount={post.likeCount} />\r\n  ));\r\n\r\n  const addPost = (postText: string) => {\r\n    props.addPost(postText);\r\n  };\r\n\r\n  return (\r\n    <div className={s.myPosts}>\r\n      <div className={s.createPost}>\r\n        <img src={avatar} alt=\"avatar\" className={s.avatarIcon} />\r\n        <PostForm addPost={addPost} />\r\n      </div>\r\n      <div className={s.posts}>{postElements}</div>\r\n    </div>\r\n  );\r\n};\r\nexport interface IInitialValues {\r\n  postText: string;\r\n}\r\nexport interface IErrors {\r\n  postText?: string;\r\n}\r\nexport interface IPostProps {\r\n  addPost: (postText: string) => void;\r\n}\r\nconst PostForm: FC<IPostProps> = ({ addPost }) => {\r\n  const initialValues: IInitialValues = {\r\n    postText: '',\r\n  };\r\n  const validate = (values: FormikValues) => {\r\n    const errors: IErrors = {};\r\n\r\n    if (values.postText.length > 500) {\r\n      errors.postText = 'Max length 500';\r\n    }\r\n    return errors;\r\n  };\r\n  return (\r\n    <div className={s.formWrapper}>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validate={(values: FormikValues) => validate(values)}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          const { postText } = values;\r\n          addPost(postText);\r\n          setSubmitting(false);\r\n          resetForm();\r\n        }}\r\n      >\r\n        {({ isSubmitting, touched, errors }) => (\r\n          <Form className={s.form}>\r\n            <Field type=\"textarea\" name=\"postText\" id=\"postText\" className={s.newPost} />\r\n            {touched.postText && errors.postText && (\r\n              <div className={s.errors}>{errors.postText}</div>\r\n            )}\r\n\r\n            <button type=\"submit\" disabled={isSubmitting} className={s.btn}>\r\n              +\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\nexport default MyPosts;\r\n","import { connect } from 'react-redux';\r\nimport { EmptyObject, Dispatch } from 'redux';\r\nimport { IDialogsState, IProfileState, IActionType } from '../../../interfaces';\r\nimport { addPostCreator } from '../../../redux/profileReducer';\r\n\r\nimport MyPosts from './MyPosts';\r\n\r\nconst mapState = (\r\n  state: EmptyObject & {\r\n    dialogsReducer: IDialogsState;\r\n    profileReducer: IProfileState;\r\n  }\r\n) => {\r\n  return {\r\n    posts: state.profileReducer.posts,\r\n  };\r\n};\r\n\r\nconst mapDispatch = (dispatch: Dispatch<IActionType>) => {\r\n  return {\r\n    addPost: (postText: string) => {\r\n      dispatch(addPostCreator(postText));\r\n    },\r\n  };\r\n};\r\nconst MyPostsContainer = connect(mapState, mapDispatch)(MyPosts);\r\nexport default MyPostsContainer;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"avatarImg\":\"ProfileInfo_avatarImg__9D6pi\",\"info\":\"ProfileInfo_info__NKoGS\",\"description\":\"ProfileInfo_description__FV6Tx\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileStatusWrapper\":\"ProfileStatus_profileStatusWrapper__yY+cn\",\"profileStatusInput\":\"ProfileStatus_profileStatusInput__vU0Qh\"};","import React, { FC, useEffect, useState } from 'react';\r\nimport { IProfileStatusProps } from '../../../interfaces';\r\nimport s from './ProfileStatus.module.scss';\r\n\r\nconst ProfileStatus: FC<IProfileStatusProps> = ({ status, updateStatus }) => {\r\n  const [editMode, setEditMode] = useState<boolean>(false);\r\n  const [localStatus, setLocalStatus] = useState<string>(status);\r\n  useEffect(() => {\r\n    setLocalStatus(status);\r\n  }, [status]);\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deActivateEditMode = () => {\r\n    setEditMode(false);\r\n    updateStatus(localStatus);\r\n  };\r\n  const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setLocalStatus(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div className={s.profileStatusWrapper}>\r\n      {!editMode && (\r\n        <div data-testid=\"status\" className={s.profileStatusText} onDoubleClick={activateEditMode}>\r\n          status: {localStatus || '----'}\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div className={s.profileStatusInputWrapper}>\r\n          <input\r\n            data-testid=\"statusInput\"\r\n            className={s.profileStatusInput}\r\n            autoFocus={true}\r\n            value={localStatus}\r\n            onBlur={deActivateEditMode}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n              onChangeHandler(e);\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default ProfileStatus;\r\n","import React, { FC } from 'react';\r\nimport Preloader from '../../../common/Preloader/Preloader';\r\nimport { IProfileProps } from '../../../interfaces';\r\nimport userPhoto from '../../../assets/user.png';\r\nimport s from './ProfileInfo.module.scss';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\nconst ProfileInfo: FC<IProfileProps> = React.memo((props) => {\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  } else {\r\n    return (\r\n      <div className={s.info}>\r\n        <div className={s.ava}>\r\n          <img\r\n            alt=\"avatar\"\r\n            src={props.profile.photos.large ? props.profile.photos.large : userPhoto}\r\n            className={s.avatarImg}\r\n          />\r\n        </div>\r\n        <div className={s.description}>\r\n          <p>{props.profile.fullName}</p>\r\n          <ProfileStatus status={props.status} updateStatus={props.updateStatus} />\r\n          <p>about Me: {props.profile.aboutMe}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n});\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__4u1tx\",\"avatarImg\":\"Profile_avatarImg__LUzuI\",\"info\":\"Profile_info__usfHa\"};","import React, { FC } from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport s from './Profile.module.scss';\r\nimport { IProfileProps } from '../../interfaces';\r\n\r\nconst Profile: FC<IProfileProps> = (props) => {\r\n  return (\r\n    <section className={s.profile}>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { JSXElementConstructor } from 'react';\r\nimport { EmptyObject, compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  IAuthState,\r\n  IProfileContainerComponentProps,\r\n  IProfileState,\r\n  IWithRouterProps,\r\n} from '../../interfaces';\r\nimport Profile from './Profile';\r\nimport { getStatus, getUserPage, updateStatus } from '../../redux/profileReducer';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nconst mapState = (\r\n  state: EmptyObject & {\r\n    profileReducer: IProfileState;\r\n    authReducer: IAuthState;\r\n  }\r\n) => {\r\n  return {\r\n    state: state.profileReducer,\r\n    profile: state.profileReducer.profile,\r\n    status: state.profileReducer.status,\r\n    authorizedUserId: state.authReducer.id,\r\n  };\r\n};\r\n\r\nexport const withRouter = (Children: JSXElementConstructor<IWithRouterProps>) => {\r\n  return (props: IProfileContainerComponentProps) => {\r\n    const match = { params: useParams() };\r\n    const navigate = useNavigate();\r\n    return <Children {...props} params={match.params} navigate={navigate} />;\r\n  };\r\n};\r\n\r\nclass ProfileContainer extends React.Component<IWithRouterProps> {\r\n  componentDidMount() {\r\n    let userId = this.props.state.profile?.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.navigate('/login');\r\n      }\r\n    }\r\n    this.props.getUserPage(+userId);\r\n    this.props.getStatus(+userId);\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        profile={this.props.state.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapState, { getUserPage, getStatus, updateStatus }),\r\n  withRouter\r\n)(ProfileContainer);\r\n"],"names":["props","className","s","src","avatar","alt","message","likeCount","PostForm","addPost","initialValues","postText","validate","values","errors","length","onSubmit","setSubmitting","resetForm","isSubmitting","touched","type","name","id","disabled","postElements","posts","map","post","connect","state","profileReducer","dispatch","addPostCreator","MyPosts","status","updateStatus","useState","editMode","setEditMode","localStatus","setLocalStatus","useEffect","onDoubleClick","autoFocus","value","onBlur","onChange","e","currentTarget","onChangeHandler","React","profile","photos","large","userPhoto","fullName","aboutMe","Preloader","withRouter","Children","match","params","useParams","navigate","useNavigate","ProfileContainer","userId","this","authorizedUserId","getUserPage","getStatus","compose","authReducer"],"sourceRoot":""}