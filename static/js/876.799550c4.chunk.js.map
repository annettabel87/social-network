{"version":3,"file":"static/js/876.799550c4.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Users/Users.module.scss?b204","components/Users/User.tsx","webpack://social-network/./src/common/Paginator/Paginator.module.scss?5579","common/Paginator/Paginator.tsx","components/Users/UsersSearchForm.tsx","redux/usersSelectors.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"usersPage\":\"Users_usersPage__5Tk7-\",\"userWrapper\":\"Users_userWrapper__mB6W9\",\"avatarIcon\":\"Users_avatarIcon__DxV3y\",\"mainText\":\"Users_mainText__ap7JP\",\"text\":\"Users_text__VyEP+\",\"btn\":\"Users_btn__zQLdB\",\"unfollow\":\"Users_unfollow__s19J5\",\"form\":\"Users_form__Etl48\",\"input\":\"Users_input__Re7dl\",\"button\":\"Users_button__JcVx8\"};","import React, { FC } from 'react';\r\nimport { IUserProps } from '../../interfaces';\r\nimport s from './Users.module.scss';\r\nimport userPhoto from '../../assets/user.png';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst User: FC<IUserProps> = React.memo(\r\n  ({ user, followingInProgress, toggleFollow }: IUserProps) => {\r\n    return (\r\n      <div className={s.userWrapper} key={user.id}>\r\n        <div className={s.avatarBlock}>\r\n          <NavLink to={`/profile/${user.id}`}>\r\n            <img\r\n              src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n              alt=\"avatar\"\r\n              className={s.avatarIcon}\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div className={s.userInfo}>\r\n          <p className={s.mainText}>{user.name}</p>\r\n          <p className={s.text}>{user.status}</p>\r\n          <button\r\n            disabled={followingInProgress.some((id) => id === user.id)}\r\n            className={user.followed ? `${s.btn} ${s.follow}` : `${s.btn} ${s.unfollow}`}\r\n            onClick={() => {\r\n              toggleFollow(user.id, user.followed);\r\n            }}\r\n          >\r\n            {user.followed ? 'unfollow' : 'follow'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default User;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"paginationWrapper\":\"Paginator_paginationWrapper__LHmi7\",\"paginationBtn\":\"Paginator_paginationBtn__Ci4dh\",\"selectedPage\":\"Paginator_selectedPage__niM+D\"};","import React, { FC } from 'react';\r\nimport { IPaginatorProps } from '../../interfaces';\r\nimport s from './Paginator.module.scss';\r\n\r\nconst Paginator: FC<IPaginatorProps> = ({\r\n  items,\r\n  pageSize,\r\n  currentPage,\r\n  onChangedPage,\r\n}: IPaginatorProps) => {\r\n  const pagesCount = Math.ceil(items / pageSize);\r\n  const pages: number[] = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n  const curP = currentPage;\r\n  const curPF = curP - 5 < 0 ? 0 : curP - 5;\r\n  const curPL = curP + 5;\r\n  const slicedPages = pages.slice(curPF, curPL);\r\n\r\n  return (\r\n    <div className={s.paginationWrapper}>\r\n      {slicedPages.map((p) => {\r\n        return (\r\n          <button\r\n            key={p}\r\n            className={currentPage === p ? `${s.paginationBtn} ${s.selectedPage}` : s.paginationBtn}\r\n            onClick={() => onChangedPage(p)}\r\n          >\r\n            {p}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Paginator;\r\n","import { Field, Form, Formik } from 'formik';\r\nimport { FC } from 'react';\r\nimport { IFilterData } from '../../interfaces';\r\nimport s from './Users.module.scss';\r\n\r\ninterface IInitialValues {\r\n  term: string;\r\n  friend: 'null' | 'true' | 'false';\r\n}\r\nexport interface IUserSearchFormProps {\r\n  onSetFilter: (filter: IFilterData) => void;\r\n}\r\nconst UsersSearchForm: FC<IUserSearchFormProps> = ({ onSetFilter }) => {\r\n  const initialValues: IInitialValues = {\r\n    term: '',\r\n    friend: 'null',\r\n  };\r\n\r\n  return (\r\n    <div className={s.UsersSearchForm}>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={initialValues}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          const { term, friend } = values;\r\n          const filterData = {\r\n            term,\r\n            friend: friend === 'null' ? null : friend === 'true' ? true : false,\r\n          };\r\n\r\n          onSetFilter(filterData);\r\n          setSubmitting(false);\r\n        }}\r\n      >\r\n        {({ isSubmitting, touched, errors, resetForm }) => (\r\n          <Form className={s.form}>\r\n            <Field type=\"text\" name=\"term\" id=\"term\" className={s.input} />\r\n            {touched.term && errors.term && <div className={s.errors}>{errors.term}</div>}\r\n\r\n            <Field component=\"select\" name=\"friend\" id=\"friend\" className={s.input}>\r\n              <option value=\"null\">All</option>\r\n              <option value=\"true\">Only friends</option>\r\n              <option value=\"false\">Unfollowed</option>\r\n            </Field>\r\n            {touched.friend && errors.friend && <div className={s.errors}>{errors.friend}</div>}\r\n\r\n            <button type=\"submit\" disabled={isSubmitting} className={s.button}>\r\n              Find\r\n            </button>\r\n            <button disabled={isSubmitting} className={s.button} onClick={() => resetForm()}>\r\n              reset\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersSearchForm;\r\n","import { EmptyObject } from 'redux';\r\nimport { IUsersState } from '../interfaces';\r\n\r\nexport const getUsers = (state: EmptyObject & { usersReducer: IUsersState }) => {\r\n  return state.usersReducer.users;\r\n};\r\nexport const getPageSize = (state: EmptyObject & { usersReducer: IUsersState }) => {\r\n  return state.usersReducer.pageSize;\r\n};\r\n\r\nexport const getPage = (state: EmptyObject & { usersReducer: IUsersState }) => {\r\n  return state.usersReducer.currentPage;\r\n};\r\n\r\nexport const getUsersCount = (state: EmptyObject & { usersReducer: IUsersState }) => {\r\n  return state.usersReducer.usersCount;\r\n};\r\n\r\nexport const getIsFetching = (state: EmptyObject & { usersReducer: IUsersState }) => {\r\n  return state.usersReducer.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state: EmptyObject & { usersReducer: IUsersState }) => {\r\n  return state.usersReducer.followingInProgress;\r\n};\r\n\r\nexport const getFilter = (state: EmptyObject & { usersReducer: IUsersState }) => {\r\n  return state.usersReducer.filter;\r\n};\r\n","import { FC, useEffect } from 'react';\r\nimport { IActionType, IFilterData } from '../../interfaces';\r\nimport s from './Users.module.scss';\r\nimport User from './User';\r\nimport Paginator from '../../common/Paginator/Paginator';\r\nimport UsersSearchForm from './UsersSearchForm';\r\nimport {\r\n  getFilter,\r\n  getFollowingInProgress,\r\n  getPage,\r\n  getPageSize,\r\n  getUsers,\r\n  getUsersCount,\r\n} from '../../redux/usersSelectors';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { requestUsers, toggleFollowThunk } from '../../redux/usersReducer';\r\nimport { RootState } from '../../redux/reduxStore';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { useSearchParams } from 'react-router-dom';\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\nconst Users: FC = () => {\r\n  const usersCount = useSelector(getUsersCount);\r\n  const pageSize = useSelector(getPageSize);\r\n  const currentPage = useSelector(getPage);\r\n  const users = useSelector(getUsers);\r\n  const followingInProgress = useSelector(getFollowingInProgress);\r\n  const filter = useSelector(getFilter);\r\n\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const dispatch = useDispatch<ThunkDispatch<RootState, unknown, IActionType>>();\r\n\r\n  useEffect(() => {\r\n    let actualPage = currentPage;\r\n    let actualFilter = filter;\r\n\r\n    if (searchParams.has('page')) {\r\n      actualPage = +(searchParams.get('page') as string);\r\n    }\r\n    if (searchParams.has('term')) {\r\n      actualFilter = { ...actualFilter, term: searchParams.get('term') as string };\r\n    }\r\n    switch (searchParams.get('friend')) {\r\n      case 'null':\r\n        actualFilter = { ...actualFilter, friend: null };\r\n        break;\r\n      case 'true':\r\n        actualFilter = { ...actualFilter, friend: true };\r\n        break;\r\n      case 'false':\r\n        actualFilter = { ...actualFilter, friend: false };\r\n        break;\r\n    }\r\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const query: QueryParamsType = {};\r\n\r\n    if (!!filter.term) query.term = filter.term;\r\n    if (filter.friend !== null) query.friend = String(filter.friend);\r\n    if (currentPage !== 1) query.page = String(currentPage);\r\n\r\n    setSearchParams(query);\r\n  }, [filter, currentPage]);\r\n  const onChangedPage = (pageNumber: number): void => {\r\n    dispatch(requestUsers(pageNumber, pageSize, filter));\r\n  };\r\n\r\n  const onSetFilter = (filterData: IFilterData) => {\r\n    dispatch(requestUsers(1, pageSize, filterData));\r\n  };\r\n\r\n  const toggleFollow = (userId: number, userFollowed: boolean) => {\r\n    dispatch(toggleFollowThunk(userId, userFollowed));\r\n  };\r\n  return (\r\n    <div className={s.usersPage}>\r\n      <UsersSearchForm onSetFilter={onSetFilter} />\r\n      <Paginator\r\n        items={usersCount}\r\n        pageSize={pageSize}\r\n        currentPage={currentPage}\r\n        onChangedPage={onChangedPage}\r\n      />\r\n      {users.map((user) => (\r\n        <User\r\n          key={user.id}\r\n          user={user}\r\n          followingInProgress={followingInProgress}\r\n          toggleFollow={toggleFollow}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Users from './Users';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport { getIsFetching } from '../../redux/usersSelectors';\r\n\r\nconst UsersContainer: FC = () => {\r\n  const isFetching = useSelector(getIsFetching);\r\n\r\n  return (\r\n    <>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </>\r\n  );\r\n};\r\nexport default UsersContainer;\r\n"],"names":["React","user","followingInProgress","toggleFollow","className","s","to","id","src","photos","small","userPhoto","alt","name","status","disabled","some","followed","onClick","items","pageSize","currentPage","onChangedPage","pagesCount","Math","ceil","pages","i","push","curPF","curPL","slicedPages","slice","map","p","onSetFilter","enableReinitialize","initialValues","term","friend","onSubmit","values","setSubmitting","isSubmitting","touched","errors","resetForm","type","component","value","getUsers","state","usersReducer","users","getPageSize","getPage","getUsersCount","usersCount","getIsFetching","isFetching","getFollowingInProgress","getFilter","filter","useSelector","useSearchParams","searchParams","setSearchParams","dispatch","useDispatch","useEffect","actualPage","actualFilter","has","get","requestUsers","query","String","page","userId","userFollowed","toggleFollowThunk","filterData","pageNumber","Preloader"],"sourceRoot":""}