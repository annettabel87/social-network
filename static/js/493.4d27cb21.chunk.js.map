{"version":3,"file":"static/js/493.4d27cb21.chunk.js","mappings":"uNACA,GAAgB,eAAiB,6BAA6B,OAAS,qBAAqB,YAAc,0BAA0B,cAAgB,4BAA4B,MAAQ,oBAAoB,MAAQ,oBAAoB,OAAS,qBAAqB,SAAW,uBAAuB,KAAO,oB,SCsBzSA,EAAW,WACf,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KACb,SAACC,GAAD,OAAsDA,EAAMC,YAAYC,YAS1E,OAPAC,EAAAA,EAAAA,YAAU,WAER,OADAP,GAASQ,EAAAA,EAAAA,OACF,WACLR,GAASS,EAAAA,EAAAA,UAEV,KAGD,2BACc,UAAXP,IAAsB,2EACvB,SAACQ,EAAD,KACA,SAACC,EAAD,QAKAD,EAAe,WACnB,IAAME,GAAWT,EAAAA,EAAAA,KACf,SAACC,GAAD,OAAsDA,EAAMC,YAAYO,YAEpEC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAV,EAAAA,EAAAA,YAAU,WACW,IAAD,EAAdS,IACF,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAEvD,CAACR,KAGF,iBAAKS,UAAWC,EAAAA,cAAiBC,SAhBb,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAC7Ef,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWlC,UACGL,EAASoB,KAAI,SAACC,GAAD,OACZ,SAACC,GAAD,UAAwBD,GAAVA,EAAEE,QAElB,gBAAKC,IAAKvB,QAIVqB,EAA+BG,EAAAA,MACnC,YAAwD,IAArDF,EAAoD,EAApDA,GAAIG,EAAgD,EAAhDA,QAASC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,SAErB,OADAC,QAAQC,IAAIP,IAEV,iBAAKd,UAAWC,EAAAA,eAAhB,WACE,gBAAKD,UAAWC,EAAAA,OAAUqB,IAAKJ,EAAOK,IAAI,YAC1C,iBAAKvB,UAAWC,EAAAA,YAAhB,WACE,gBAAKD,UAAWC,EAAAA,MAAhB,SAA0BkB,KAC1B,gBAAKnB,UAAWC,EAAAA,KAAhB,SAAyBgB,aAM7B3B,EAAqB,WACzB,OAA8BI,EAAAA,EAAAA,UAAiB,IAA/C,eAAOuB,EAAP,KAAgBO,EAAhB,KACM7C,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAwCA,EAAMC,YAAYC,YASrF,OACE,gBAAKe,UAAWC,EAAAA,eAAhB,UACE,iBAAKD,UAAWC,EAAAA,KAAhB,WACE,qBACED,UAAWC,EAAAA,MACXwB,SAAU,SAACtB,GACTqB,EAAWrB,EAAEE,cAAcqB,QAE7BA,MAAOT,KAET,mBAAQU,SAAqB,UAAX9C,EAAoB+C,QAjBjB,WACpBX,IAGLtC,GAASkD,EAAAA,EAAAA,IAAYZ,IACrBO,EAAW,MAY4DxB,UAAWC,EAAAA,OAA9E,wBAOR,EAvGqB,WACnB,OACE,gBAAKD,UAAWC,EAAAA,SAAhB,UACE,SAACvB,EAAD","sources":["webpack://social-network/./src/components/Chat/Chat.module.css?f66a","components/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messageWrapper\":\"Chat_messageWrapper__fJS97\",\"avatar\":\"Chat_avatar__c4Wgv\",\"textWrapper\":\"Chat_textWrapper__1lIfI\",\"messagesBlock\":\"Chat_messagesBlock__tQQtl\",\"title\":\"Chat_title__biFsK\",\"input\":\"Chat_input__SAFpm\",\"button\":\"Chat_button__nwPH0\",\"chatPage\":\"Chat_chatPage__xYwC+\",\"form\":\"Chat_form__72gLU\"};","import React, { useRef } from 'react';\r\nimport { FC, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { EmptyObject } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { IActionType, IChatState } from '../../interfaces';\r\nimport {\r\n  ChatMessageType,\r\n  sendMessage,\r\n  startMessagesListening,\r\n  stopMessagesListening,\r\n} from '../../redux/chatReducer';\r\nimport { RootState } from '../../redux/reduxStore';\r\nimport s from './Chat.module.css';\r\n\r\nconst ChatPage: FC = () => {\r\n  return (\r\n    <div className={s.chatPage}>\r\n      <Chat />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Chat: FC = () => {\r\n  const dispatch = useDispatch<ThunkDispatch<RootState, unknown, IActionType>>();\r\n  const status = useSelector(\r\n    (state: EmptyObject & { chatReducer: IChatState }) => state.chatReducer.statusWs\r\n  );\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening());\r\n    return () => {\r\n      dispatch(stopMessagesListening());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n      <Messages />\r\n      <AddMessageForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Messages: FC = () => {\r\n  const messages = useSelector(\r\n    (state: EmptyObject & { chatReducer: IChatState }) => state.chatReducer.messages\r\n  );\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    const element = e.currentTarget;\r\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true);\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className={s.messagesBlock} onScroll={scrollHandler}>\r\n      {messages.map((m) => (\r\n        <Message key={m.id} {...m} />\r\n      ))}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  );\r\n};\r\nconst Message: FC<ChatMessageType> = React.memo(\r\n  ({ id, message, photo, userName }: ChatMessageType) => {\r\n    console.log(id);\r\n    return (\r\n      <div className={s.messageWrapper}>\r\n        <img className={s.avatar} src={photo} alt=\"avatar\" />\r\n        <div className={s.textWrapper}>\r\n          <div className={s.title}>{userName}</div>\r\n          <div className={s.text}>{message}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\nconst AddMessageForm: FC = () => {\r\n  const [message, setMessage] = useState<string>('');\r\n  const dispatch = useDispatch<ThunkDispatch<RootState, unknown, IActionType>>();\r\n  const status = useSelector((state: { chatReducer: IChatState }) => state.chatReducer.statusWs);\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) {\r\n      return;\r\n    }\r\n    dispatch(sendMessage(message));\r\n    setMessage('');\r\n  };\r\n  return (\r\n    <div className={s.AddMessageForm}>\r\n      <div className={s.form}>\r\n        <textarea\r\n          className={s.input}\r\n          onChange={(e) => {\r\n            setMessage(e.currentTarget.value);\r\n          }}\r\n          value={message}\r\n        ></textarea>\r\n        <button disabled={status !== 'ready'} onClick={sendMessageHandler} className={s.button}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ChatPage;\r\n"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chatReducer","statusWs","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","className","s","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","id","ref","React","message","photo","userName","console","log","src","alt","setMessage","onChange","value","disabled","onClick","sendMessage"],"sourceRoot":""}